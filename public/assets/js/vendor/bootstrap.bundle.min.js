!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery")):"function"==typeof define&&define.amd?define(["exports","jquery"],e):e((t=t||self).bootstrap={},t.jQuery)}(this,function(t,p){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function r(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function s(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,n,i;e=o,i=r[n=t],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i})}return o}p=p&&p.hasOwnProperty("default")?p.default:p;var e="transitionend";var m={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=p(t).css("transition-duration"),n=p(t).css("transition-delay"),i=parseFloat(e),o=parseFloat(n);return i||o?(e=e.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(e)+parseFloat(n))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){p(t).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],r=e[i],s=r&&m.isElement(r)?"element":(a=r,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+o+'".')}var a},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"!=typeof t.getRootNode)return t instanceof ShadowRoot?t:t.parentNode?m.findShadowRoot(t.parentNode):null;var e=t.getRootNode();return e instanceof ShadowRoot?e:null}};p.fn.emulateTransitionEnd=function(t){var e=this,n=!1;return p(this).one(m.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||m.triggerTransitionEnd(e)},t),this},p.event.special[m.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(p(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var n,o="alert",a="bs.alert",l="."+a,c=p.fn[o],h={CLOSE:"close"+l,CLOSED:"closed"+l,CLICK_DATA_API:"click"+l+".data-api"},u=((n=f.prototype).close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){p.removeData(this._element,a),this._element=null},n._getRootElement=function(t){var e=m.getSelectorFromElement(t),n=!1;return e&&(n=document.querySelector(e)),n=n||p(t).closest(".alert")[0]},n._triggerCloseEvent=function(t){var e=p.Event(h.CLOSE);return p(t).trigger(e),e},n._removeElement=function(e){var n=this;if(p(e).removeClass("show"),p(e).hasClass("fade")){var t=m.getTransitionDurationFromElement(e);p(e).one(m.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(t)}else this._destroyElement(e)},n._destroyElement=function(t){p(t).detach().trigger(h.CLOSED).remove()},f._jQueryInterface=function(n){return this.each(function(){var t=p(this),e=t.data(a);e||(e=new f(this),t.data(a,e)),"close"===n&&e[n](this)})},f._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},r(f,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),f);function f(t){this._element=t}p(document).on(h.CLICK_DATA_API,'[data-dismiss="alert"]',u._handleDismiss(new u)),p.fn[o]=u._jQueryInterface,p.fn[o].Constructor=u,p.fn[o].noConflict=function(){return p.fn[o]=c,u._jQueryInterface};var d,g="button",_="bs.button",v="."+_,y=".data-api",E=p.fn[g],b="active",w='[data-toggle^="button"]',C=".btn",T={CLICK_DATA_API:"click"+v+y,FOCUS_BLUR_DATA_API:"focus"+v+y+" blur"+v+y},S=((d=D.prototype).toggle=function(){var t=!0,e=!0,n=p(this._element).closest('[data-toggle="buttons"]')[0];if(n){var i=this._element.querySelector('input:not([type="hidden"])');if(i){if("radio"===i.type)if(i.checked&&this._element.classList.contains(b))t=!1;else{var o=n.querySelector(".active");o&&p(o).removeClass(b)}if(t){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!this._element.classList.contains(b),p(i).trigger("change")}i.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(b)),t&&p(this._element).toggleClass(b)},d.dispose=function(){p.removeData(this._element,_),this._element=null},D._jQueryInterface=function(e){return this.each(function(){var t=p(this).data(_);t||(t=new D(this),p(this).data(_,t)),"toggle"===e&&t[e]()})},r(D,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),D);function D(t){this._element=t}p(document).on(T.CLICK_DATA_API,w,function(t){t.preventDefault();var e=t.target;p(e).hasClass("btn")||(e=p(e).closest(C)),S._jQueryInterface.call(p(e),"toggle")}).on(T.FOCUS_BLUR_DATA_API,w,function(t){var e=p(t.target).closest(C)[0];p(e).toggleClass("focus",/^focus(in)?$/.test(t.type))}),p.fn[g]=S._jQueryInterface,p.fn[g].Constructor=S,p.fn[g].noConflict=function(){return p.fn[g]=E,S._jQueryInterface};var I,A="carousel",O="bs.carousel",N="."+O,k=".data-api",L=p.fn[A],x={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},P={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},H="next",j="prev",R={SLIDE:"slide"+N,SLID:"slid"+N,KEYDOWN:"keydown"+N,MOUSEENTER:"mouseenter"+N,MOUSELEAVE:"mouseleave"+N,TOUCHSTART:"touchstart"+N,TOUCHMOVE:"touchmove"+N,TOUCHEND:"touchend"+N,POINTERDOWN:"pointerdown"+N,POINTERUP:"pointerup"+N,DRAG_START:"dragstart"+N,LOAD_DATA_API:"load"+N+k,CLICK_DATA_API:"click"+N+k},F="active",M=".active.carousel-item",W={TOUCH:"touch",PEN:"pen"},U=((I=B.prototype).next=function(){this._isSliding||this._slide(H)},I.nextWhenVisible=function(){!document.hidden&&p(this._element).is(":visible")&&"hidden"!==p(this._element).css("visibility")&&this.next()},I.prev=function(){this._isSliding||this._slide(j)},I.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(m.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},I.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},I.to=function(t){var e=this;this._activeElement=this._element.querySelector(M);var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)p(this._element).one(R.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?H:j;this._slide(i,this._items[t])}},I.dispose=function(){p(this._element).off(N),p.removeData(this._element,O),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},I._getConfig=function(t){return t=s({},x,t),m.typeCheckConfig(A,t,P),t},I._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;0<e&&this.prev(),e<0&&this.next()}},I._addEventListeners=function(){var e=this;this._config.keyboard&&p(this._element).on(R.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&p(this._element).on(R.MOUSEENTER,function(t){return e.pause(t)}).on(R.MOUSELEAVE,function(t){return e.cycle(t)}),this._config.touch&&this._addTouchEventListeners()},I._addTouchEventListeners=function(){var n=this;if(this._touchSupported){var e=function(t){n._pointerEvent&&W[t.originalEvent.pointerType.toUpperCase()]?n.touchStartX=t.originalEvent.clientX:n._pointerEvent||(n.touchStartX=t.originalEvent.touches[0].clientX)},i=function(t){n._pointerEvent&&W[t.originalEvent.pointerType.toUpperCase()]&&(n.touchDeltaX=t.originalEvent.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(t){return n.cycle(t)},500+n._config.interval))};p(this._element.querySelectorAll(".carousel-item img")).on(R.DRAG_START,function(t){return t.preventDefault()}),this._pointerEvent?(p(this._element).on(R.POINTERDOWN,function(t){return e(t)}),p(this._element).on(R.POINTERUP,function(t){return i(t)}),this._element.classList.add("pointer-event")):(p(this._element).on(R.TOUCHSTART,function(t){return e(t)}),p(this._element).on(R.TOUCHMOVE,function(t){var e;(e=t).originalEvent.touches&&1<e.originalEvent.touches.length?n.touchDeltaX=0:n.touchDeltaX=e.originalEvent.touches[0].clientX-n.touchStartX}),p(this._element).on(R.TOUCHEND,function(t){return i(t)}))}},I._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},I._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(t)},I._getItemByDirection=function(t,e){var n=t===H,i=t===j,o=this._getItemIndex(e),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return e;var s=(o+(t===j?-1:1))%this._items.length;return-1==s?this._items[this._items.length-1]:this._items[s]},I._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(M)),o=p.Event(R.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return p(this._element).trigger(o),o},I._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll(".active"));p(e).removeClass(F);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&p(n).addClass(F)}},I._slide=function(t,e){var n,i,o,r=this,s=this._element.querySelector(M),a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(l),h=Boolean(this._interval);if(o=t===H?(n="carousel-item-left",i="carousel-item-next","left"):(n="carousel-item-right",i="carousel-item-prev","right"),l&&p(l).hasClass(F))this._isSliding=!1;else if(!this._triggerSlideEvent(l,o).isDefaultPrevented()&&s&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var u=p.Event(R.SLID,{relatedTarget:l,direction:o,from:a,to:c});if(p(this._element).hasClass("slide")){p(l).addClass(i),m.reflow(l),p(s).addClass(n),p(l).addClass(n);var f=parseInt(l.getAttribute("data-interval"),10);this._config.interval=f?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,f):this._config.defaultInterval||this._config.interval;var d=m.getTransitionDurationFromElement(s);p(s).one(m.TRANSITION_END,function(){p(l).removeClass(n+" "+i).addClass(F),p(s).removeClass(F+" "+i+" "+n),r._isSliding=!1,setTimeout(function(){return p(r._element).trigger(u)},0)}).emulateTransitionEnd(d)}else p(s).removeClass(F),p(l).addClass(F),this._isSliding=!1,p(this._element).trigger(u);h&&this.cycle()}},B._jQueryInterface=function(i){return this.each(function(){var t=p(this).data(O),e=s({},x,p(this).data());"object"==typeof i&&(e=s({},e,i));var n="string"==typeof i?i:e.slide;if(t||(t=new B(this,e),p(this).data(O,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}else e.interval&&e.ride&&(t.pause(),t.cycle())})},B._dataApiClickHandler=function(t){var e=m.getSelectorFromElement(this);if(e){var n=p(e)[0];if(n&&p(n).hasClass("carousel")){var i=s({},p(n).data(),p(this).data()),o=this.getAttribute("data-slide-to");o&&(i.interval=!1),B._jQueryInterface.call(p(n),i),o&&p(n).data(O).to(o),t.preventDefault()}}},r(B,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return x}}]),B);function B(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(".carousel-indicators"),this._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}p(document).on(R.CLICK_DATA_API,"[data-slide], [data-slide-to]",U._dataApiClickHandler),p(window).on(R.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll('[data-ride="carousel"]')),e=0,n=t.length;e<n;e++){var i=p(t[e]);U._jQueryInterface.call(i,i.data())}}),p.fn[A]=U._jQueryInterface,p.fn[A].Constructor=U,p.fn[A].noConflict=function(){return p.fn[A]=L,U._jQueryInterface};var q,K="collapse",Q="bs.collapse",V="."+Q,Y=p.fn[K],z={toggle:!0,parent:""},X={toggle:"boolean",parent:"(string|element)"},G={SHOW:"show"+V,SHOWN:"shown"+V,HIDE:"hide"+V,HIDDEN:"hidden"+V,CLICK_DATA_API:"click"+V+".data-api"},$="show",J="collapse",Z="collapsing",tt="collapsed",et='[data-toggle="collapse"]',nt=((q=it.prototype).toggle=function(){p(this._element).hasClass($)?this.hide():this.show()},q.show=function(){var t,e,n=this;if(!(this._isTransitioning||p(this._element).hasClass($)||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter(function(t){return"string"==typeof n._config.parent?t.getAttribute("data-parent")===n._config.parent:t.classList.contains(J)})).length&&(t=null),t&&(e=p(t).not(this._selector).data(Q))&&e._isTransitioning))){var i=p.Event(G.SHOW);if(p(this._element).trigger(i),!i.isDefaultPrevented()){t&&(it._jQueryInterface.call(p(t).not(this._selector),"hide"),e||p(t).data(Q,null));var o=this._getDimension();p(this._element).removeClass(J).addClass(Z),this._element.style[o]=0,this._triggerArray.length&&p(this._triggerArray).removeClass(tt).attr("aria-expanded",!0),this.setTransitioning(!0);var r="scroll"+(o[0].toUpperCase()+o.slice(1)),s=m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END,function(){p(n._element).removeClass(Z).addClass(J).addClass($),n._element.style[o]="",n.setTransitioning(!1),p(n._element).trigger(G.SHOWN)}).emulateTransitionEnd(s),this._element.style[o]=this._element[r]+"px"}}},q.hide=function(){var t=this;if(!this._isTransitioning&&p(this._element).hasClass($)){var e=p.Event(G.HIDE);if(p(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",m.reflow(this._element),p(this._element).addClass(Z).removeClass(J).removeClass($);var i=this._triggerArray.length;if(0<i)for(var o=0;o<i;o++){var r=this._triggerArray[o],s=m.getSelectorFromElement(r);null!==s&&(p([].slice.call(document.querySelectorAll(s))).hasClass($)||p(r).addClass(tt).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[n]="";var a=m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END,function(){t.setTransitioning(!1),p(t._element).removeClass(Z).addClass(J).trigger(G.HIDDEN)}).emulateTransitionEnd(a)}}},q.setTransitioning=function(t){this._isTransitioning=t},q.dispose=function(){p.removeData(this._element,Q),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},q._getConfig=function(t){return(t=s({},z,t)).toggle=Boolean(t.toggle),m.typeCheckConfig(K,t,X),t},q._getDimension=function(){return p(this._element).hasClass("width")?"width":"height"},q._getParent=function(){var t,n=this;m.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',i=[].slice.call(t.querySelectorAll(e));return p(i).each(function(t,e){n._addAriaAndCollapsedClass(it._getTargetFromElement(e),[e])}),t},q._addAriaAndCollapsedClass=function(t,e){var n=p(t).hasClass($);e.length&&p(e).toggleClass(tt,!n).attr("aria-expanded",n)},it._getTargetFromElement=function(t){var e=m.getSelectorFromElement(t);return e?document.querySelector(e):null},it._jQueryInterface=function(i){return this.each(function(){var t=p(this),e=t.data(Q),n=s({},z,t.data(),"object"==typeof i&&i?i:{});if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new it(this,n),t.data(Q,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}})},r(it,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return z}}]),it);function it(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(et)),i=0,o=n.length;i<o;i++){var r=n[i],s=m.getSelectorFromElement(r),a=[].slice.call(document.querySelectorAll(s)).filter(function(t){return t===e});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}p(document).on(G.CLICK_DATA_API,et,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=p(this),e=m.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(e));p(i).each(function(){var t=p(this),e=t.data(Q)?"toggle":n.data();nt._jQueryInterface.call(t,e)})}),p.fn[K]=nt._jQueryInterface,p.fn[K].Constructor=nt,p.fn[K].noConflict=function(){return p.fn[K]=Y,nt._jQueryInterface};for(var ot="undefined"!=typeof window&&"undefined"!=typeof document,rt=["Edge","Trident","Firefox"],st=0,at=0;at<rt.length;at+=1)if(ot&&0<=navigator.userAgent.indexOf(rt[at])){st=1;break}var lt=ot&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},st))}};function ct(t){return t&&"[object Function]"==={}.toString.call(t)}function ht(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function ut(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function ft(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=ht(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(n+o+i)?t:ft(ut(t))}var dt=ot&&!(!window.MSInputMethodContext||!document.documentMode),pt=ot&&/MSIE 10/.test(navigator.userAgent);function mt(t){return 11===t?dt:10===t?pt:dt||pt}function gt(t){if(!t)return document.documentElement;for(var e=mt(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===ht(n,"position")?gt(n):n:t?t.ownerDocument.documentElement:document.documentElement}function _t(t){return null!==t.parentNode?_t(t.parentNode):t}function vt(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,o=n?e:t,r=document.createRange();r.setStart(i,0),r.setEnd(o,0);var s,a,l=r.commonAncestorContainer;if(t!==l&&e!==l||i.contains(o))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&gt(s.firstElementChild)!==s?gt(l):l;var c=_t(t);return c.host?vt(c.host,e):vt(t,_t(e).host)}function yt(t,e){var n="top"===(1<arguments.length&&void 0!==e?e:"top")?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"!==i&&"HTML"!==i)return t[n];var o=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||o)[n]}function Et(t,e){var n="x"===e?"Left":"Top",i="Left"==n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function bt(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],mt(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function wt(t){var e=t.body,n=t.documentElement,i=mt(10)&&getComputedStyle(n);return{height:bt("Height",e,n,i),width:bt("Width",e,n,i)}}function Ct(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Tt=function(t,e,n){return e&&Dt(t.prototype,e),n&&Dt(t,n),t},St=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function Dt(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function It(t){return St({},t,{right:t.left+t.width,bottom:t.top+t.height})}function At(t){var e={};try{if(mt(10)){e=t.getBoundingClientRect();var n=yt(t,"top"),i=yt(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},r="HTML"===t.nodeName?wt(t.ownerDocument):{},s=r.width||t.clientWidth||o.right-o.left,a=r.height||t.clientHeight||o.bottom-o.top,l=t.offsetWidth-s,c=t.offsetHeight-a;if(l||c){var h=ht(t);l-=Et(h,"x"),c-=Et(h,"y"),o.width-=l,o.height-=c}return It(o)}function Ot(t,e,n){var i=2<arguments.length&&void 0!==n&&n,o=mt(10),r="HTML"===e.nodeName,s=At(t),a=At(e),l=ft(t),c=ht(e),h=parseFloat(c.borderTopWidth,10),u=parseFloat(c.borderLeftWidth,10);i&&r&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var f=It({top:s.top-a.top-h,left:s.left-a.left-u,width:s.width,height:s.height});if(f.marginTop=0,f.marginLeft=0,!o&&r){var d=parseFloat(c.marginTop,10),p=parseFloat(c.marginLeft,10);f.top-=h-d,f.bottom-=h-d,f.left-=u-p,f.right-=u-p,f.marginTop=d,f.marginLeft=p}return(o&&!i?e.contains(l):e===l&&"BODY"!==l.nodeName)&&(f=function(t,e,n){var i=2<arguments.length&&void 0!==n&&n,o=yt(e,"top"),r=yt(e,"left"),s=i?-1:1;return t.top+=o*s,t.bottom+=o*s,t.left+=r*s,t.right+=r*s,t}(f,e)),f}function Nt(t){if(!t||!t.parentElement||mt())return document.documentElement;for(var e=t.parentElement;e&&"none"===ht(e,"transform");)e=e.parentElement;return e||document.documentElement}function kt(t,e,n,i,o){var r=4<arguments.length&&void 0!==o&&o,s={top:0,left:0},a=r?Nt(t):vt(t,e);if("viewport"===i)s=function(t,e){var n=1<arguments.length&&void 0!==e&&e,i=t.ownerDocument.documentElement,o=Ot(t,i),r=Math.max(i.clientWidth,window.innerWidth||0),s=Math.max(i.clientHeight,window.innerHeight||0),a=n?0:yt(i),l=n?0:yt(i,"left");return It({top:a-o.top+o.marginTop,left:l-o.left+o.marginLeft,width:r,height:s})}(a,r);else{var l=void 0;"scrollParent"===i?"BODY"===(l=ft(ut(e))).nodeName&&(l=t.ownerDocument.documentElement):l="window"===i?t.ownerDocument.documentElement:i;var c=Ot(l,a,r);if("HTML"!==l.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===ht(e,"position"))return!0;var i=ut(e);return!!i&&t(i)}(a))s=c;else{var h=wt(t.ownerDocument),u=h.height,f=h.width;s.top+=c.top-c.marginTop,s.bottom=u+c.top,s.left+=c.left-c.marginLeft,s.right=f+c.left}}var d="number"==typeof(n=n||0);return s.left+=d?n:n.left||0,s.top+=d?n:n.top||0,s.right-=d?n:n.right||0,s.bottom-=d?n:n.bottom||0,s}function Lt(t,e,i,n,o,r){var s=5<arguments.length&&void 0!==r?r:0;if(-1===t.indexOf("auto"))return t;var a=kt(i,n,s,o),l={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},c=Object.keys(l).map(function(t){return St({key:t},l[t],{area:(e=l[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),h=c.filter(function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight}),u=0<h.length?h[0].key:c[0].key,f=t.split("-")[1];return u+(f?"-"+f:"")}function xt(t,e,n,i){var o=3<arguments.length&&void 0!==i?i:null;return Ot(n,o?Nt(e):vt(e,n),o)}function Pt(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),i=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function Ht(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function jt(t,e,n){n=n.split("-")[0];var i=Pt(t),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),s=r?"top":"left",a=r?"left":"top",l=r?"height":"width",c=r?"width":"height";return o[s]=e[s]+e[l]/2-i[l]/2,o[a]=n===a?e[a]-i[c]:e[Ht(a)],o}function Rt(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function Ft(t,n,e){return(void 0===e?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t.name===n});var i=Rt(t,function(t){return t.name===n});return t.indexOf(i)}(t,0,e))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e=t.function||t.fn;t.enabled&&ct(e)&&(n.offsets.popper=It(n.offsets.popper),n.offsets.reference=It(n.offsets.reference),n=e(n,t))}),n}function Mt(t,n){return t.some(function(t){var e=t.name;return t.enabled&&e===n})}function Wt(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var o=e[i],r=o?""+o+n:t;if(void 0!==document.body.style[r])return r}return null}function Ut(t){var e=t.ownerDocument;return e?e.defaultView:window}function Bt(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function qt(n,i){Object.keys(i).forEach(function(t){var e="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&Bt(i[t])&&(e="px"),n.style[t]=i[t]+e})}var Kt=ot&&/Firefox/i.test(navigator.userAgent);function Qt(t,e,n){var i=Rt(t,function(t){return t.name===e}),o=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!o){var r="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}var Vt=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Yt=Vt.slice(3);function zt(t,e){var n=1<arguments.length&&void 0!==e&&e,i=Yt.indexOf(t),o=Yt.slice(i+1).concat(Yt.slice(0,i));return n?o.reverse():o}var Xt={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var o=t.offsets,r=o.reference,s=o.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",h={start:Ct({},l,r[l]),end:Ct({},l,r[l]+r[c]-s[c])};t.offsets.popper=St({},s,h[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n,i=e.offset,o=t.placement,r=t.offsets,s=r.popper,a=r.reference,l=o.split("-")[0];return n=Bt(+i)?[+i,0]:function(t,o,r,e){var s=[0,0],a=-1!==["right","left"].indexOf(e),n=t.split(/(\+|\-)/).map(function(t){return t.trim()}),i=n.indexOf(Rt(n,function(t){return-1!==t.search(/,|\s/)}));n[i]&&-1===n[i].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==i?[n.slice(0,i).concat([n[i].split(l)[0]]),[n[i].split(l)[1]].concat(n.slice(i+1))]:[n];return(c=c.map(function(t,e){var n=(1===e?!a:a)?"height":"width",i=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,i=!0,t):i?(t[t.length-1]+=e,i=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],s=o[2];if(!r)return t;if(0!==s.indexOf("%"))return"vh"!==s&&"vw"!==s?r:("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r;var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return It(a)[e]/100*r}(t,n,o,r)})})).forEach(function(n,i){n.forEach(function(t,e){Bt(t)&&(s[i]+=t*("-"===n[e-1]?-1:1))})}),s}(i,s,a,l),"left"===l?(s.top+=n[0],s.left-=n[1]):"right"===l?(s.top+=n[0],s.left+=n[1]):"top"===l?(s.left+=n[0],s.top-=n[1]):"bottom"===l&&(s.left+=n[0],s.top+=n[1]),t.popper=s,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,i){var e=i.boundariesElement||gt(t.instance.popper);t.instance.reference===e&&(e=gt(e));var n=Wt("transform"),o=t.instance.popper.style,r=o.top,s=o.left,a=o[n];o.top="",o.left="",o[n]="";var l=kt(t.instance.popper,t.instance.reference,i.padding,e,t.positionFixed);o.top=r,o.left=s,o[n]=a,i.boundaries=l;var c=i.priority,h=t.offsets.popper,u={primary:function(t){var e=h[t];return h[t]<l[t]&&!i.escapeWithReference&&(e=Math.max(h[t],l[t])),Ct({},t,e)},secondary:function(t){var e="right"===t?"left":"top",n=h[e];return h[t]>l[t]&&!i.escapeWithReference&&(n=Math.min(h[e],l[t]-("right"===t?h.width:h.height))),Ct({},e,n)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";h=St({},h,u[e](t))}),t.offsets.popper=h,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,o=t.placement.split("-")[0],r=Math.floor,s=-1!==["top","bottom"].indexOf(o),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<r(i[l])&&(t.offsets.popper[l]=r(i[l])-n[c]),n[l]>r(i[a])&&(t.offsets.popper[l]=r(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!Qt(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],r=t.offsets,s=r.popper,a=r.reference,l=-1!==["left","right"].indexOf(o),c=l?"height":"width",h=l?"Top":"Left",u=h.toLowerCase(),f=l?"left":"top",d=l?"bottom":"right",p=Pt(i)[c];a[d]-p<s[u]&&(t.offsets.popper[u]-=s[u]-(a[d]-p)),a[u]+p>s[d]&&(t.offsets.popper[u]+=a[u]+p-s[d]),t.offsets.popper=It(t.offsets.popper);var m=a[u]+a[c]/2-p/2,g=ht(t.instance.popper),_=parseFloat(g["margin"+h],10),v=parseFloat(g["border"+h+"Width"],10),y=m-t.offsets.popper[u]-_-v;return y=Math.max(Math.min(s[c]-p,y),0),t.arrowElement=i,t.offsets.arrow=(Ct(n={},u,Math.round(y)),Ct(n,f,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(p,m){if(Mt(p.instance.modifiers,"inner"))return p;if(p.flipped&&p.placement===p.originalPlacement)return p;var g=kt(p.instance.popper,p.instance.reference,m.padding,m.boundariesElement,p.positionFixed),_=p.placement.split("-")[0],v=Ht(_),y=p.placement.split("-")[1]||"",E=[];switch(m.behavior){case"flip":E=[_,v];break;case"clockwise":E=zt(_);break;case"counterclockwise":E=zt(_,!0);break;default:E=m.behavior}return E.forEach(function(t,e){if(_!==t||E.length===e+1)return p;_=p.placement.split("-")[0],v=Ht(_);var n,i=p.offsets.popper,o=p.offsets.reference,r=Math.floor,s="left"===_&&r(i.right)>r(o.left)||"right"===_&&r(i.left)<r(o.right)||"top"===_&&r(i.bottom)>r(o.top)||"bottom"===_&&r(i.top)<r(o.bottom),a=r(i.left)<r(g.left),l=r(i.right)>r(g.right),c=r(i.top)<r(g.top),h=r(i.bottom)>r(g.bottom),u="left"===_&&a||"right"===_&&l||"top"===_&&c||"bottom"===_&&h,f=-1!==["top","bottom"].indexOf(_),d=!!m.flipVariations&&(f&&"start"===y&&a||f&&"end"===y&&l||!f&&"start"===y&&c||!f&&"end"===y&&h);(s||u||d)&&(p.flipped=!0,(s||u)&&(_=E[e+1]),d&&(y="end"===(n=y)?"start":"start"===n?"end":n),p.placement=_+(y?"-"+y:""),p.offsets.popper=St({},p.offsets.popper,jt(p.instance.popper,p.offsets.reference,p.placement)),p=Ft(p.instance.modifiers,p,"flip"))}),p},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,o=i.popper,r=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[s?"left":"top"]=r[n]-(a?o[s?"width":"height"]:0),t.placement=Ht(e),t.offsets.popper=It(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!Qt(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=Rt(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,o=t.offsets.popper,r=Rt(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s,a,l,c,h,u,f,d,p,m,g,_,v,y,E,b,w=void 0!==r?r:e.gpuAcceleration,C=gt(t.instance.popper),T=At(C),S={position:o.position},D=(s=t,a=window.devicePixelRatio<2||!Kt,c=(l=s.offsets).popper,h=l.reference,u=Math.round,f=Math.floor,d=function(t){return t},p=u(h.width),m=u(c.width),g=-1!==["left","right"].indexOf(s.placement),_=-1!==s.placement.indexOf("-"),y=a?u:d,{left:(v=a?g||_||p%2==m%2?u:f:d)(p%2==1&&m%2==1&&!_&&a?c.left-1:c.left),top:y(c.top),bottom:y(c.bottom),right:v(c.right)}),I="bottom"===n?"top":"bottom",A="right"===i?"left":"right",O=Wt("transform");if(b="bottom"==I?"HTML"===C.nodeName?-C.clientHeight+D.bottom:-T.height+D.bottom:D.top,E="right"==A?"HTML"===C.nodeName?-C.clientWidth+D.right:-T.width+D.right:D.left,w&&O)S[O]="translate3d("+E+"px, "+b+"px, 0)",S[I]=0,S[A]=0,S.willChange="transform";else{var N="bottom"==I?-1:1,k="right"==A?-1:1;S[I]=b*N,S[A]=E*k,S.willChange=I+", "+A}var L={"x-placement":t.placement};return t.attributes=St({},L,t.attributes),t.styles=St({},S,t.styles),t.arrowStyles=St({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return qt(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&qt(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,o){var r=xt(o,e,t,n.positionFixed),s=Lt(n.placement,r,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),qt(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Gt=(Tt($t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=xt(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=Lt(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=jt(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=Ft(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,Mt(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Wt("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=function(t,e,n,i){n.updateBound=i,Ut(t).addEventListener("resize",n.updateBound,{passive:!0});var o=ft(t);return function t(e,n,i,o){var r="BODY"===e.nodeName,s=r?e.ownerDocument.defaultView:e;s.addEventListener(n,i,{passive:!0}),r||t(ft(s.parentNode),n,i,o),o.push(s)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return function(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,Ut(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}.call(this)}}]),$t);function $t(t,e){var n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};!function(t){if(!(t instanceof $t))throw new TypeError("Cannot call a class as a function")}(this),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=lt(this.update.bind(this)),this.options=St({},$t.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=e&&e.jquery?e[0]:e,this.options.modifiers={},Object.keys(St({},$t.Defaults.modifiers,i.modifiers)).forEach(function(t){n.options.modifiers[t]=St({},$t.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return St({name:t},n.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&ct(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}Gt.Utils=("undefined"!=typeof window?window:global).PopperUtils,Gt.placements=Vt,Gt.Defaults=Xt;var Jt,Zt="dropdown",te="bs.dropdown",ee="."+te,ne=".data-api",ie=p.fn[Zt],oe=new RegExp("38|40|27"),re={HIDE:"hide"+ee,HIDDEN:"hidden"+ee,SHOW:"show"+ee,SHOWN:"shown"+ee,CLICK:"click"+ee,CLICK_DATA_API:"click"+ee+ne,KEYDOWN_DATA_API:"keydown"+ee+ne,KEYUP_DATA_API:"keyup"+ee+ne},se="disabled",ae="show",le="dropdown-menu-right",ce='[data-toggle="dropdown"]',he=".dropdown-menu",ue={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},fe={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},de=((Jt=pe.prototype).toggle=function(){if(!this._element.disabled&&!p(this._element).hasClass(se)){var t=pe._getParentFromElement(this._element),e=p(this._menu).hasClass(ae);if(pe._clearMenus(),!e){var n={relatedTarget:this._element},i=p.Event(re.SHOW,n);if(p(t).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(void 0===Gt)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var o=this._element;"parent"===this._config.reference?o=t:m.isElement(this._config.reference)&&(o=this._config.reference,void 0!==this._config.reference.jquery&&(o=this._config.reference[0])),"scrollParent"!==this._config.boundary&&p(t).addClass("position-static"),this._popper=new Gt(o,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===p(t).closest(".navbar-nav").length&&p(document.body).children().on("mouseover",null,p.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),p(this._menu).toggleClass(ae),p(t).toggleClass(ae).trigger(p.Event(re.SHOWN,n))}}}},Jt.show=function(){if(!(this._element.disabled||p(this._element).hasClass(se)||p(this._menu).hasClass(ae))){var t={relatedTarget:this._element},e=p.Event(re.SHOW,t),n=pe._getParentFromElement(this._element);p(n).trigger(e),e.isDefaultPrevented()||(p(this._menu).toggleClass(ae),p(n).toggleClass(ae).trigger(p.Event(re.SHOWN,t)))}},Jt.hide=function(){if(!this._element.disabled&&!p(this._element).hasClass(se)&&p(this._menu).hasClass(ae)){var t={relatedTarget:this._element},e=p.Event(re.HIDE,t),n=pe._getParentFromElement(this._element);p(n).trigger(e),e.isDefaultPrevented()||(p(this._menu).toggleClass(ae),p(n).toggleClass(ae).trigger(p.Event(re.HIDDEN,t)))}},Jt.dispose=function(){p.removeData(this._element,te),p(this._element).off(ee),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},Jt.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},Jt._addEventListeners=function(){var e=this;p(this._element).on(re.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},Jt._getConfig=function(t){return t=s({},this.constructor.Default,p(this._element).data(),t),m.typeCheckConfig(Zt,t,this.constructor.DefaultType),t},Jt._getMenuElement=function(){if(!this._menu){var t=pe._getParentFromElement(this._element);t&&(this._menu=t.querySelector(he))}return this._menu},Jt._getPlacement=function(){var t=p(this._element.parentNode),e="bottom-start";return t.hasClass("dropup")?(e="top-start",p(this._menu).hasClass(le)&&(e="top-end")):t.hasClass("dropright")?e="right-start":t.hasClass("dropleft")?e="left-start":p(this._menu).hasClass(le)&&(e="bottom-end"),e},Jt._detectNavbar=function(){return 0<p(this._element).closest(".navbar").length},Jt._getOffset=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=s({},t.offsets,e._config.offset(t.offsets,e._element)||{}),t}:t.offset=this._config.offset,t},Jt._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),t},pe._jQueryInterface=function(e){return this.each(function(){var t=p(this).data(te);if(t||(t=new pe(this,"object"==typeof e?e:null),p(this).data(te,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},pe._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=[].slice.call(document.querySelectorAll(ce)),n=0,i=e.length;n<i;n++){var o=pe._getParentFromElement(e[n]),r=p(e[n]).data(te),s={relatedTarget:e[n]};if(t&&"click"===t.type&&(s.clickEvent=t),r){var a=r._menu;if(p(o).hasClass(ae)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&p.contains(o,t.target))){var l=p.Event(re.HIDE,s);p(o).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&p(document.body).children().off("mouseover",null,p.noop),e[n].setAttribute("aria-expanded","false"),p(a).removeClass(ae),p(o).removeClass(ae).trigger(p.Event(re.HIDDEN,s)))}}}},pe._getParentFromElement=function(t){var e,n=m.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},pe._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||p(t.target).closest(he).length)):oe.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!p(this).hasClass(se))){var e=pe._getParentFromElement(this),n=p(e).hasClass(ae);if(n&&(!n||27!==t.which&&32!==t.which)){var i=[].slice.call(e.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"));if(0!==i.length){var o=i.indexOf(t.target);38===t.which&&0<o&&o--,40===t.which&&o<i.length-1&&o++,o<0&&(o=0),i[o].focus()}}else{if(27===t.which){var r=e.querySelector(ce);p(r).trigger("focus")}p(this).trigger("click")}}},r(pe,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ue}},{key:"DefaultType",get:function(){return fe}}]),pe);function pe(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}p(document).on(re.KEYDOWN_DATA_API,ce,de._dataApiKeydownHandler).on(re.KEYDOWN_DATA_API,he,de._dataApiKeydownHandler).on(re.CLICK_DATA_API+" "+re.KEYUP_DATA_API,de._clearMenus).on(re.CLICK_DATA_API,ce,function(t){t.preventDefault(),t.stopPropagation(),de._jQueryInterface.call(p(this),"toggle")}).on(re.CLICK_DATA_API,".dropdown form",function(t){t.stopPropagation()}),p.fn[Zt]=de._jQueryInterface,p.fn[Zt].Constructor=de,p.fn[Zt].noConflict=function(){return p.fn[Zt]=ie,de._jQueryInterface};var me,ge="modal",_e="bs.modal",ve="."+_e,ye=p.fn[ge],Ee={backdrop:!0,keyboard:!0,focus:!0,show:!0},be={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},we={HIDE:"hide"+ve,HIDDEN:"hidden"+ve,SHOW:"show"+ve,SHOWN:"shown"+ve,FOCUSIN:"focusin"+ve,RESIZE:"resize"+ve,CLICK_DISMISS:"click.dismiss"+ve,KEYDOWN_DISMISS:"keydown.dismiss"+ve,MOUSEUP_DISMISS:"mouseup.dismiss"+ve,MOUSEDOWN_DISMISS:"mousedown.dismiss"+ve,CLICK_DATA_API:"click"+ve+".data-api"},Ce="modal-open",Te="fade",Se="show",De=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Ie=".sticky-top",Ae=((me=Oe.prototype).toggle=function(t){return this._isShown?this.hide():this.show(t)},me.show=function(t){var e=this;if(!this._isShown&&!this._isTransitioning){p(this._element).hasClass(Te)&&(this._isTransitioning=!0);var n=p.Event(we.SHOW,{relatedTarget:t});p(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),p(this._element).on(we.CLICK_DISMISS,'[data-dismiss="modal"]',function(t){return e.hide(t)}),p(this._dialog).on(we.MOUSEDOWN_DISMISS,function(){p(e._element).one(we.MOUSEUP_DISMISS,function(t){p(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},me.hide=function(t){var e=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var n=p.Event(we.HIDE);if(p(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=p(this._element).hasClass(Te);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),p(document).off(we.FOCUSIN),p(this._element).removeClass(Se),p(this._element).off(we.CLICK_DISMISS),p(this._dialog).off(we.MOUSEDOWN_DISMISS),i){var o=m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(o)}else this._hideModal()}}},me.dispose=function(){[window,this._element,this._dialog].forEach(function(t){return p(t).off(ve)}),p(document).off(we.FOCUSIN),p.removeData(this._element,_e),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},me.handleUpdate=function(){this._adjustDialog()},me._getConfig=function(t){return t=s({},Ee,t),m.typeCheckConfig(ge,t,be),t},me._showElement=function(t){var e=this,n=p(this._element).hasClass(Te);function i(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,p(e._element).trigger(o)}this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),p(this._dialog).hasClass("modal-dialog-scrollable")?this._dialog.querySelector(".modal-body").scrollTop=0:this._element.scrollTop=0,n&&m.reflow(this._element),p(this._element).addClass(Se),this._config.focus&&this._enforceFocus();var o=p.Event(we.SHOWN,{relatedTarget:t});if(n){var r=m.getTransitionDurationFromElement(this._dialog);p(this._dialog).one(m.TRANSITION_END,i).emulateTransitionEnd(r)}else i()},me._enforceFocus=function(){var e=this;p(document).off(we.FOCUSIN).on(we.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===p(e._element).has(t.target).length&&e._element.focus()})},me._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?p(this._element).on(we.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||p(this._element).off(we.KEYDOWN_DISMISS)},me._setResizeEvent=function(){var e=this;this._isShown?p(window).on(we.RESIZE,function(t){return e.handleUpdate(t)}):p(window).off(we.RESIZE)},me._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop(function(){p(document.body).removeClass(Ce),t._resetAdjustments(),t._resetScrollbar(),p(t._element).trigger(we.HIDDEN)})},me._removeBackdrop=function(){this._backdrop&&(p(this._backdrop).remove(),this._backdrop=null)},me._showBackdrop=function(t){var e=this,n=p(this._element).hasClass(Te)?Te:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",n&&this._backdrop.classList.add(n),p(this._backdrop).appendTo(document.body),p(this._element).on(we.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),n&&m.reflow(this._backdrop),p(this._backdrop).addClass(Se),!t)return;if(!n)return void t();var i=m.getTransitionDurationFromElement(this._backdrop);p(this._backdrop).one(m.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){p(this._backdrop).removeClass(Se);var o=function(){e._removeBackdrop(),t&&t()};if(p(this._element).hasClass(Te)){var r=m.getTransitionDurationFromElement(this._backdrop);p(this._backdrop).one(m.TRANSITION_END,o).emulateTransitionEnd(r)}else o()}else t&&t()},me._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},me._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},me._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},me._setScrollbar=function(){var o=this;if(this._isBodyOverflowing){var t=[].slice.call(document.querySelectorAll(De)),e=[].slice.call(document.querySelectorAll(Ie));p(t).each(function(t,e){var n=e.style.paddingRight,i=p(e).css("padding-right");p(e).data("padding-right",n).css("padding-right",parseFloat(i)+o._scrollbarWidth+"px")}),p(e).each(function(t,e){var n=e.style.marginRight,i=p(e).css("margin-right");p(e).data("margin-right",n).css("margin-right",parseFloat(i)-o._scrollbarWidth+"px")});var n=document.body.style.paddingRight,i=p(document.body).css("padding-right");p(document.body).data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}p(document.body).addClass(Ce)},me._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(De));p(t).each(function(t,e){var n=p(e).data("padding-right");p(e).removeData("padding-right"),e.style.paddingRight=n||""});var e=[].slice.call(document.querySelectorAll(Ie));p(e).each(function(t,e){var n=p(e).data("margin-right");void 0!==n&&p(e).css("margin-right",n).removeData("margin-right")});var n=p(document.body).data("padding-right");p(document.body).removeData("padding-right"),document.body.style.paddingRight=n||""},me._getScrollbarWidth=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},Oe._jQueryInterface=function(n,i){return this.each(function(){var t=p(this).data(_e),e=s({},Ee,p(this).data(),"object"==typeof n&&n?n:{});if(t||(t=new Oe(this,e),p(this).data(_e,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},r(Oe,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ee}}]),Oe);function Oe(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(".modal-dialog"),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}p(document).on(we.CLICK_DATA_API,'[data-toggle="modal"]',function(t){var e,n=this,i=m.getSelectorFromElement(this);i&&(e=document.querySelector(i));var o=p(e).data(_e)?"toggle":s({},p(e).data(),p(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var r=p(e).one(we.SHOW,function(t){t.isDefaultPrevented()||r.one(we.HIDDEN,function(){p(n).is(":visible")&&n.focus()})});Ae._jQueryInterface.call(p(e),o,this)}),p.fn[ge]=Ae._jQueryInterface,p.fn[ge].Constructor=Ae,p.fn[ge].noConflict=function(){return p.fn[ge]=ye,Ae._jQueryInterface};var Ne=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],ke=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,Le=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function xe(t,s,e){if(0===t.length)return t;if(e&&"function"==typeof e)return e(t);for(var n=(new window.DOMParser).parseFromString(t,"text/html"),a=Object.keys(s),l=[].slice.call(n.body.querySelectorAll("*")),i=function(t,e){var n=l[t],i=n.nodeName.toLowerCase();if(-1===a.indexOf(n.nodeName.toLowerCase()))return n.parentNode.removeChild(n),"continue";var o=[].slice.call(n.attributes),r=[].concat(s["*"]||[],s[i]||[]);o.forEach(function(t){!function(t,e){var n=t.nodeName.toLowerCase();if(-1!==e.indexOf(n))return-1===Ne.indexOf(n)||Boolean(t.nodeValue.match(ke)||t.nodeValue.match(Le));for(var i=e.filter(function(t){return t instanceof RegExp}),o=0,r=i.length;o<r;o++)if(n.match(i[o]))return 1;return 0}(t,r)&&n.removeAttribute(t.nodeName)})},o=0,r=l.length;o<r;o++)i(o);return n.body.innerHTML}var Pe,He="tooltip",je="bs.tooltip",Re="."+je,Fe=p.fn[He],Me="bs-tooltip",We=new RegExp("(^|\\s)"+Me+"\\S+","g"),Ue=["sanitize","whiteList","sanitizeFn"],Be={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object"},qe={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Ke={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]}},Qe="show",Ve={HIDE:"hide"+Re,HIDDEN:"hidden"+Re,SHOW:"show"+Re,SHOWN:"shown"+Re,INSERTED:"inserted"+Re,CLICK:"click"+Re,FOCUSIN:"focusin"+Re,FOCUSOUT:"focusout"+Re,MOUSEENTER:"mouseenter"+Re,MOUSELEAVE:"mouseleave"+Re},Ye="fade",ze="show",Xe="hover",Ge="focus",$e=((Pe=Je.prototype).enable=function(){this._isEnabled=!0},Pe.disable=function(){this._isEnabled=!1},Pe.toggleEnabled=function(){this._isEnabled=!this._isEnabled},Pe.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=p(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),p(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(p(this.getTipElement()).hasClass(ze))return void this._leave(null,this);this._enter(null,this)}},Pe.dispose=function(){clearTimeout(this._timeout),p.removeData(this.element,this.constructor.DATA_KEY),p(this.element).off(this.constructor.EVENT_KEY),p(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&p(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},Pe.show=function(){var e=this;if("none"===p(this.element).css("display"))throw new Error("Please use show on visible elements");var t=p.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){p(this.element).trigger(t);var n=m.findShadowRoot(this.element),i=p.contains(null!==n?n:this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!i)return;var o=this.getTipElement(),r=m.getUID(this.constructor.NAME);o.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&p(o).addClass(Ye);var s="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,a=this._getAttachment(s);this.addAttachmentClass(a);var l=this._getContainer();p(o).data(this.constructor.DATA_KEY,this),p.contains(this.element.ownerDocument.documentElement,this.tip)||p(o).appendTo(l),p(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new Gt(this.element,o,{placement:a,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){return e._handlePopperPlacementChange(t)}}),p(o).addClass(ze),"ontouchstart"in document.documentElement&&p(document.body).children().on("mouseover",null,p.noop);var c=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,p(e.element).trigger(e.constructor.Event.SHOWN),"out"===t&&e._leave(null,e)};if(p(this.tip).hasClass(Ye)){var h=m.getTransitionDurationFromElement(this.tip);p(this.tip).one(m.TRANSITION_END,c).emulateTransitionEnd(h)}else c()}},Pe.hide=function(t){function e(){n._hoverState!==Qe&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),p(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()}var n=this,i=this.getTipElement(),o=p.Event(this.constructor.Event.HIDE);if(p(this.element).trigger(o),!o.isDefaultPrevented()){if(p(i).removeClass(ze),"ontouchstart"in document.documentElement&&p(document.body).children().off("mouseover",null,p.noop),this._activeTrigger.click=!1,this._activeTrigger[Ge]=!1,this._activeTrigger[Xe]=!1,p(this.tip).hasClass(Ye)){var r=m.getTransitionDurationFromElement(i);p(i).one(m.TRANSITION_END,e).emulateTransitionEnd(r)}else e();this._hoverState=""}},Pe.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},Pe.isWithContent=function(){return Boolean(this.getTitle())},Pe.addAttachmentClass=function(t){p(this.getTipElement()).addClass(Me+"-"+t)},Pe.getTipElement=function(){return this.tip=this.tip||p(this.config.template)[0],this.tip},Pe.setContent=function(){var t=this.getTipElement();this.setElementContent(p(t.querySelectorAll(".tooltip-inner")),this.getTitle()),p(t).removeClass(Ye+" "+ze)},Pe.setElementContent=function(t,e){"object"!=typeof e||!e.nodeType&&!e.jquery?this.config.html?(this.config.sanitize&&(e=xe(e,this.config.whiteList,this.config.sanitizeFn)),t.html(e)):t.text(e):this.config.html?p(e).parent().is(t)||t.empty().append(e):t.text(p(e).text())},Pe.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t=t||("function"==typeof this.config.title?this.config.title.call(this.element):this.config.title)},Pe._getOffset=function(){var e=this,t={};return"function"==typeof this.config.offset?t.fn=function(t){return t.offsets=s({},t.offsets,e.config.offset(t.offsets,e.element)||{}),t}:t.offset=this.config.offset,t},Pe._getContainer=function(){return!1===this.config.container?document.body:m.isElement(this.config.container)?p(this.config.container):p(document).find(this.config.container)},Pe._getAttachment=function(t){return qe[t.toUpperCase()]},Pe._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)p(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if("manual"!==t){var e=t===Xe?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===Xe?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;p(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}}),p(this.element).closest(".modal").on("hide.bs.modal",function(){i.element&&i.hide()}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},Pe._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");!this.element.getAttribute("title")&&"string"==t||(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},Pe._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||p(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),p(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?Ge:Xe]=!0),p(e.getTipElement()).hasClass(ze)||e._hoverState===Qe?e._hoverState=Qe:(clearTimeout(e._timeout),e._hoverState=Qe,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===Qe&&e.show()},e.config.delay.show):e.show())},Pe._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||p(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),p(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?Ge:Xe]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState="out",e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){"out"===e._hoverState&&e.hide()},e.config.delay.hide):e.hide())},Pe._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},Pe._getConfig=function(t){var e=p(this.element).data();return Object.keys(e).forEach(function(t){-1!==Ue.indexOf(t)&&delete e[t]}),"number"==typeof(t=s({},this.constructor.Default,e,"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),m.typeCheckConfig(He,t,this.constructor.DefaultType),t.sanitize&&(t.template=xe(t.template,t.whiteList,t.sanitizeFn)),t},Pe._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},Pe._cleanTipClass=function(){var t=p(this.getTipElement()),e=t.attr("class").match(We);null!==e&&e.length&&t.removeClass(e.join(""))},Pe._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},Pe._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(p(t).removeClass(Ye),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},Je._jQueryInterface=function(n){return this.each(function(){var t=p(this).data(je),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new Je(this,e),p(this).data(je,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},r(Je,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ke}},{key:"NAME",get:function(){return He}},{key:"DATA_KEY",get:function(){return je}},{key:"Event",get:function(){return Ve}},{key:"EVENT_KEY",get:function(){return Re}},{key:"DefaultType",get:function(){return Be}}]),Je);function Je(t,e){if(void 0===Gt)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}p.fn[He]=$e._jQueryInterface,p.fn[He].Constructor=$e,p.fn[He].noConflict=function(){return p.fn[He]=Fe,$e._jQueryInterface};var Ze="popover",tn="bs.popover",en="."+tn,nn=p.fn[Ze],on="bs-popover",rn=new RegExp("(^|\\s)"+on+"\\S+","g"),sn=s({},$e.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),an=s({},$e.DefaultType,{content:"(string|element|function)"}),ln={HIDE:"hide"+en,HIDDEN:"hidden"+en,SHOW:"show"+en,SHOWN:"shown"+en,INSERTED:"inserted"+en,CLICK:"click"+en,FOCUSIN:"focusin"+en,FOCUSOUT:"focusout"+en,MOUSEENTER:"mouseenter"+en,MOUSELEAVE:"mouseleave"+en},cn=function(t){var e,n;function i(){return t.apply(this,arguments)||this}n=t,(e=i).prototype=Object.create(n.prototype),(e.prototype.constructor=e).__proto__=n;var o=i.prototype;return o.isWithContent=function(){return this.getTitle()||this._getContent()},o.addAttachmentClass=function(t){p(this.getTipElement()).addClass(on+"-"+t)},o.getTipElement=function(){return this.tip=this.tip||p(this.config.template)[0],this.tip},o.setContent=function(){var t=p(this.getTipElement());this.setElementContent(t.find(".popover-header"),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(".popover-body"),e),t.removeClass("fade show")},o._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},o._cleanTipClass=function(){var t=p(this.getTipElement()),e=t.attr("class").match(rn);null!==e&&0<e.length&&t.removeClass(e.join(""))},i._jQueryInterface=function(n){return this.each(function(){var t=p(this).data(tn),e="object"==typeof n?n:null;if((t||!/dispose|hide/.test(n))&&(t||(t=new i(this,e),p(this).data(tn,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},r(i,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return sn}},{key:"NAME",get:function(){return Ze}},{key:"DATA_KEY",get:function(){return tn}},{key:"Event",get:function(){return ln}},{key:"EVENT_KEY",get:function(){return en}},{key:"DefaultType",get:function(){return an}}]),i}($e);p.fn[Ze]=cn._jQueryInterface,p.fn[Ze].Constructor=cn,p.fn[Ze].noConflict=function(){return p.fn[Ze]=nn,cn._jQueryInterface};var hn,un="scrollspy",fn="bs.scrollspy",dn="."+fn,pn=p.fn[un],mn={offset:10,method:"auto",target:""},gn={offset:"number",method:"string",target:"(string|element)"},_n={ACTIVATE:"activate"+dn,SCROLL:"scroll"+dn,LOAD_DATA_API:"load"+dn+".data-api"},vn="active",yn=".nav, .list-group",En=".nav-link",bn=".list-group-item",wn="position",Cn=((hn=Tn.prototype).refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":wn,o="auto"===this._config.method?t:this._config.method,r=o===wn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(t){var e,n=m.getSelectorFromElement(t);if(n&&(e=document.querySelector(n)),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[p(e)[o]().top+r,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},hn.dispose=function(){p.removeData(this._element,fn),p(this._scrollElement).off(dn),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},hn._getConfig=function(t){if("string"!=typeof(t=s({},mn,"object"==typeof t&&t?t:{})).target){var e=p(t.target).attr("id");e||(e=m.getUID(un),p(t.target).attr("id",e)),t.target="#"+e}return m.typeCheckConfig(un,t,gn),t},hn._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},hn._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},hn._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},hn._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;)this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}},hn._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'}),n=p([].slice.call(document.querySelectorAll(t.join(","))));n.hasClass("dropdown-item")?(n.closest(".dropdown").find(".dropdown-toggle").addClass(vn),n.addClass(vn)):(n.addClass(vn),n.parents(yn).prev(En+", "+bn).addClass(vn),n.parents(yn).prev(".nav-item").children(En).addClass(vn)),p(this._scrollElement).trigger(_n.ACTIVATE,{relatedTarget:e})},hn._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter(function(t){return t.classList.contains(vn)}).forEach(function(t){return t.classList.remove(vn)})},Tn._jQueryInterface=function(e){return this.each(function(){var t=p(this).data(fn);if(t||(t=new Tn(this,"object"==typeof e&&e),p(this).data(fn,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},r(Tn,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return mn}}]),Tn);function Tn(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+En+","+this._config.target+" "+bn+","+this._config.target+" .dropdown-item",this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,p(this._scrollElement).on(_n.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}p(window).on(_n.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll('[data-spy="scroll"]')),e=t.length;e--;){var n=p(t[e]);Cn._jQueryInterface.call(n,n.data())}}),p.fn[un]=Cn._jQueryInterface,p.fn[un].Constructor=Cn,p.fn[un].noConflict=function(){return p.fn[un]=pn,Cn._jQueryInterface};var Sn,Dn="bs.tab",In="."+Dn,An=p.fn.tab,On={HIDE:"hide"+In,HIDDEN:"hidden"+In,SHOW:"show"+In,SHOWN:"shown"+In,CLICK_DATA_API:"click"+In+".data-api"},Nn="active",kn=".active",Ln="> li > .active",xn=((Sn=Pn.prototype).show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&p(this._element).hasClass(Nn)||p(this._element).hasClass("disabled"))){var t,i,e=p(this._element).closest(".nav, .list-group")[0],o=m.getSelectorFromElement(this._element);if(e){var r="UL"===e.nodeName||"OL"===e.nodeName?Ln:kn;i=(i=p.makeArray(p(e).find(r)))[i.length-1]}var s=p.Event(On.HIDE,{relatedTarget:this._element}),a=p.Event(On.SHOW,{relatedTarget:i});if(i&&p(i).trigger(s),p(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(t=document.querySelector(o)),this._activate(this._element,e);var l=function(){var t=p.Event(On.HIDDEN,{relatedTarget:n._element}),e=p.Event(On.SHOWN,{relatedTarget:i});p(i).trigger(t),p(n._element).trigger(e)};t?this._activate(t,t.parentNode,l):l()}}},Sn.dispose=function(){p.removeData(this._element,Dn),this._element=null},Sn._activate=function(t,e,n){function i(){return o._transitionComplete(t,r,n)}var o=this,r=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?p(e).children(kn):p(e).find(Ln))[0],s=n&&r&&p(r).hasClass("fade");if(r&&s){var a=m.getTransitionDurationFromElement(r);p(r).removeClass("show").one(m.TRANSITION_END,i).emulateTransitionEnd(a)}else i()},Sn._transitionComplete=function(t,e,n){if(e){p(e).removeClass(Nn);var i=p(e.parentNode).find("> .dropdown-menu .active")[0];i&&p(i).removeClass(Nn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(p(t).addClass(Nn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),m.reflow(t),t.classList.contains("fade")&&t.classList.add("show"),t.parentNode&&p(t.parentNode).hasClass("dropdown-menu")){var o=p(t).closest(".dropdown")[0];if(o){var r=[].slice.call(o.querySelectorAll(".dropdown-toggle"));p(r).addClass(Nn)}t.setAttribute("aria-expanded",!0)}n&&n()},Pn._jQueryInterface=function(n){return this.each(function(){var t=p(this),e=t.data(Dn);if(e||(e=new Pn(this),t.data(Dn,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},r(Pn,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),Pn);function Pn(t){this._element=t}p(document).on(On.CLICK_DATA_API,'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',function(t){t.preventDefault(),xn._jQueryInterface.call(p(this),"show")}),p.fn.tab=xn._jQueryInterface,p.fn.tab.Constructor=xn,p.fn.tab.noConflict=function(){return p.fn.tab=An,xn._jQueryInterface};var Hn,jn="toast",Rn="bs.toast",Fn="."+Rn,Mn=p.fn[jn],Wn={CLICK_DISMISS:"click.dismiss"+Fn,HIDE:"hide"+Fn,HIDDEN:"hidden"+Fn,SHOW:"show"+Fn,SHOWN:"shown"+Fn},Un="show",Bn="showing",qn={animation:"boolean",autohide:"boolean",delay:"number"},Kn={animation:!0,autohide:!0,delay:500},Qn=((Hn=Vn.prototype).show=function(){var t=this;function e(){t._element.classList.remove(Bn),t._element.classList.add(Un),p(t._element).trigger(Wn.SHOWN),t._config.autohide&&t.hide()}if(p(this._element).trigger(Wn.SHOW),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),this._element.classList.add(Bn),this._config.animation){var n=m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END,e).emulateTransitionEnd(n)}else e()},Hn.hide=function(t){var e=this;this._element.classList.contains(Un)&&(p(this._element).trigger(Wn.HIDE),t?this._close():this._timeout=setTimeout(function(){e._close()},this._config.delay))},Hn.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(Un)&&this._element.classList.remove(Un),p(this._element).off(Wn.CLICK_DISMISS),p.removeData(this._element,Rn),this._element=null,this._config=null},Hn._getConfig=function(t){return t=s({},Kn,p(this._element).data(),"object"==typeof t&&t?t:{}),m.typeCheckConfig(jn,t,this.constructor.DefaultType),t},Hn._setListeners=function(){var t=this;p(this._element).on(Wn.CLICK_DISMISS,'[data-dismiss="toast"]',function(){return t.hide(!0)})},Hn._close=function(){function t(){e._element.classList.add("hide"),p(e._element).trigger(Wn.HIDDEN)}var e=this;if(this._element.classList.remove(Un),this._config.animation){var n=m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END,t).emulateTransitionEnd(n)}else t()},Vn._jQueryInterface=function(n){return this.each(function(){var t=p(this),e=t.data(Rn);if(e||(e=new Vn(this,"object"==typeof n&&n),t.data(Rn,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n](this)}})},r(Vn,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"DefaultType",get:function(){return qn}},{key:"Default",get:function(){return Kn}}]),Vn);function Vn(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}p.fn[jn]=Qn._jQueryInterface,p.fn[jn].Constructor=Qn,p.fn[jn].noConflict=function(){return p.fn[jn]=Mn,Qn._jQueryInterface},function(){if(void 0===p)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=p.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||4<=t[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),t.Util=m,t.Alert=u,t.Button=S,t.Carousel=U,t.Collapse=nt,t.Dropdown=de,t.Modal=Ae,t.Popover=cn,t.Scrollspy=Cn,t.Tab=xn,t.Toast=Qn,t.Tooltip=$e,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,